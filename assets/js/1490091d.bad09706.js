"use strict";(self.webpackChunksol_panel_docs=self.webpackChunksol_panel_docs||[]).push([[413],{4852:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(9231);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(644),a=(n(9231),n(4852));const o={},l="Development",i={unversionedId:"development/README",id:"development/README",title:"Development",description:"Contributing to SOL Panel is easiest done via Github Codespaces.",source:"@site/docs/development/README.md",sourceDirName:"development",slug:"/development/",permalink:"/docs/development/",draft:!1,editUrl:"https://github.com/trustless-engineering/sol-panel/tree/next/docs/docs/development/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dedicated RPC",permalink:"/docs/features/dedicated-rpc"},next:{title:"Architecture",permalink:"/docs/development/fundamentals"}},p={},s=[{value:"Post-Start Steps",id:"post-start-steps",level:2},{value:"Seed Databases",id:"seed-databases",level:3},{value:"Create Cluster",id:"create-cluster",level:3},{value:"Start Application",id:"start-application",level:3},{value:"Pre-Commit",id:"pre-commit",level:2},{value:"Commit",id:"commit",level:2}],c={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"development"},"Development"),(0,a.kt)("p",null,"Contributing to SOL Panel is easiest done via Github Codespaces.\nSimply create a new Codespace from this branch and all the dependencies will be pre-configured for you.\nYou can then connect directly to the Codespace from VS Code."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"NOTE: A codespace with ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"4 CPU/8GB RAM"))," minimum is suggested!")),(0,a.kt)("h2",{id:"post-start-steps"},"Post-Start Steps"),(0,a.kt)("p",null,"After the codespace is started, you can spin the cluster and start the application with the following commands:"),(0,a.kt)("h3",{id:"seed-databases"},"Seed Databases"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"pnpm prisma generate\n")),(0,a.kt)("h3",{id:"create-cluster"},"Create Cluster"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"ctlptl apply -f docs/development/cluster.yml\n")),(0,a.kt)("h3",{id:"start-application"},"Start Application"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"tilt up")),(0,a.kt)("p",null,"After a few moments, the application will be available at ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),"."),(0,a.kt)("h1",{id:"making-changes"},"Making Changes"),(0,a.kt)("p",null,"Any changes to the code will be"),(0,a.kt)("h1",{id:"committing"},"Committing"),(0,a.kt)("h2",{id:"pre-commit"},"Pre-Commit"),(0,a.kt)("p",null,"Before committing, make sure you've run the following commands:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pnpm format")," - runs eslint formatter")),(0,a.kt)("h2",{id:"commit"},"Commit"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"NOTE")),": You ",(0,a.kt)("em",{parentName:"p"},"must")," have Tilt running when commiting as the Husky hook will attempt to build\na production build, and this requires database bindings to be present!"),(0,a.kt)("p",null,"Make sure you follow the proper commit message ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/angular/angular/blob/main/CONTRIBUTING.md#-commit-message-format"},"format"),"."))}u.isMDXComponent=!0}}]);