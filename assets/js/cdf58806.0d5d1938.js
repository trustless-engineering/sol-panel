"use strict";(self.webpackChunksol_panel_docs=self.webpackChunksol_panel_docs||[]).push([[313],{4852:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(9231);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2906:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(644),o=(n(9231),n(4852));const i={title:"Motivation",sidebar_position:1},a=void 0,s={unversionedId:"introduction/motivation",id:"introduction/motivation",title:"Motivation",description:"SOL Panel was developed in response to the challenges posed by Solana data providers, characterized by their unstable services and inconsistent APIs.",source:"@site/docs/introduction/motivation.mdx",sourceDirName:"introduction",slug:"/introduction/motivation",permalink:"/docs/introduction/motivation",draft:!1,editUrl:"https://github.com/trustless-engineering/sol-panel/tree/next/docs/docs/introduction/motivation.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Motivation",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Architecture",permalink:"/docs/introduction/architecture"}},l={},c=[{value:"Primary Goals",id:"primary-goals",level:4}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"SOL Panel was developed in response to the challenges posed by Solana data providers, characterized by their unstable services and inconsistent APIs.\nThese issues significantly hinder the development of robust and long-lasting applications on top of these systems and make onboarding into Solana as a developer even more difficult."),(0,o.kt)("p",null,"The motivation behind SOL Panel is to address these limitations and provide a unified solution for developers seeking to build persistent applications on diverse SaaS platforms. By consolidating and streamlining the integration process, SOL Panel aims to simplify the development workflow and enhance reliability across various Solana (and other) data providers."),(0,o.kt)("h4",{id:"primary-goals"},"Primary Goals"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Provide a consistent API for developers to interact with Solana data providers"),(0,o.kt)("li",{parentName:"ul"},"Build a thriving ecosystem of community-built plugins and extensions")))}u.isMDXComponent=!0}}]);